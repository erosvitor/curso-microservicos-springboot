====================================================================================================
CURSO MICROSERVIÇOS SPRING BOOT - EMPLOYEE SERVICE - EXCEPTIONS
====================================================================================================


Exceção
----------------------------------------------------------------------------------------------------
- Criar o pacote 'com.ctseducare.employee.exception'

- Criar a classe 'ResourceNotFoundException'

@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    public ResourceNotFoundException(String exception) {
        super(exception);
    }

}


Resposta
----------------------------------------------------------------------------------------------------
- Criar o pacote 'com.ctseducare.employee.exception.response'

- Criar a classe 'ExceptionResponse'

public class ExceptionResponse implements Serializable {

    private static final long serialVersionUID = 1L;

    private int error;
    private String reason;

    public ExceptionResponse() {

    }

    public ExceptionResponse(int error, String reason) {
        this.error = error;
        this.reason = reason;
    }

    public int getError() {
        return error;
    }

    public String getReason() {
        return reason;
    }

}


Manipulador
----------------------------------------------------------------------------------------------------
- Criar o pacote 'com.ctseducare.employee.exception.handle'

- Criar a classe 'ResponseEntityExceptionHandlerCustom'

@ControllerAdvice
public class ResponseEntityExceptionHandlerCustom extends ResponseEntityExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public final ResponseEntity<ExceptionResponse> handleResourceNotFoundExceptions(Exception ex, WebRequest request) {
        ExceptionResponse exceptionResponse = new ExceptionResponse(HttpStatus.NOT_FOUND.value(), ex.getMessage());
        return new ResponseEntity<>(exceptionResponse, HttpStatus.NOT_FOUND);
    }

}


Service
----------------------------------------------------------------------------------------------------
- Alterar o método 'update' na classse 'EmployeeService' conforme abaixo

    ...
    public EmployeeDTO update(EmployeeDTO dto) {
        repository
            .findById(dto.getId())
            .orElseThrow(() -> new ResourceNotFoundException("Employee does not exist!"));
        return insertOrUpdate(dto);
    }
    ...

- Alterar o método 'delete' na classe 'EmployeeService'

    ...
    public EmployeeDTO delete(Integer id) {
        Employee employee = repository
                .findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee does not exist!"));
        repository.deleteById(id);
        return modelToDTO(employee);
    }
    ...
  

